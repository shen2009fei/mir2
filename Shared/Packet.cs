using System;
using System.Collections.Generic;
using System.IO;
using C = ClientPackets;
using S = ServerPackets;

public abstract class Packet
{
    public static bool IsServer;

    public abstract short Index { get; }

    public static Packet ReceivePacket(byte[] rawBytes, out byte[] extra)
    {
        extra = rawBytes;

        Packet p;

        if (rawBytes.Length < 4) return null; //| 2Bytes: Packet Size | 2Bytes: Packet ID |

        int length = (rawBytes[1] << 8) + rawBytes[0];

        if (length > rawBytes.Length || length < 2) return null;

        using (MemoryStream stream = new MemoryStream(rawBytes, 2, length - 2))
        using (BinaryReader reader = new BinaryReader(stream))
        {
            try
            {
                short id = reader.ReadInt16();

                p = IsServer ? GetClientPacket(id) : GetServerPacket(id);
                if (p == null) return null;

                p.ReadPacket(reader);
            }
            catch
            {
                return null;
                //return new C.Disconnect();
            }
        }

        extra = new byte[rawBytes.Length - length];
        Buffer.BlockCopy(rawBytes, length, extra, 0, rawBytes.Length - length);

        return p;
    }

    public IEnumerable<byte> GetPacketBytes()
    {
        if (Index < 0) return new byte[0];

        byte[] data;

        using (MemoryStream stream = new MemoryStream())
        {
            stream.SetLength(2);
            stream.Seek(2, SeekOrigin.Begin);
            using BinaryWriter writer = new BinaryWriter(stream);
            writer.Write(Index);
            WritePacket(writer);
            stream.Seek(0, SeekOrigin.Begin);
            writer.Write((short)stream.Length);
            stream.Seek(0, SeekOrigin.Begin);

            data = new byte[stream.Length];
            stream.Read(data, 0, data.Length);
        }

        return data;
    }

    protected abstract void ReadPacket(BinaryReader reader);
    protected abstract void WritePacket(BinaryWriter writer);

    private static Packet GetClientPacket(short index)
    {
        return index switch
        {
            (short)ClientPacketIds.ClientVersion => new C.ClientVersion(),
            (short)ClientPacketIds.Disconnect => new C.Disconnect(),
            (short)ClientPacketIds.KeepAlive => new C.KeepAlive(),
            (short)ClientPacketIds.NewAccount => new C.NewAccount(),
            (short)ClientPacketIds.ChangePassword => new C.ChangePassword(),
            (short)ClientPacketIds.Login => new C.Login(),
            (short)ClientPacketIds.NewCharacter => new C.NewCharacter(),
            (short)ClientPacketIds.DeleteCharacter => new C.DeleteCharacter(),
            (short)ClientPacketIds.StartGame => new C.StartGame(),
            (short)ClientPacketIds.LogOut => new C.LogOut(),
            (short)ClientPacketIds.Turn => new C.Turn(),
            (short)ClientPacketIds.Walk => new C.Walk(),
            (short)ClientPacketIds.Run => new C.Run(),
            (short)ClientPacketIds.Chat => new C.Chat(),
            (short)ClientPacketIds.MoveItem => new C.MoveItem(),
            (short)ClientPacketIds.StoreItem => new C.StoreItem(),
            (short)ClientPacketIds.TakeBackItem => new C.TakeBackItem(),
            (short)ClientPacketIds.MergeItem => new C.MergeItem(),
            (short)ClientPacketIds.EquipItem => new C.EquipItem(),
            (short)ClientPacketIds.RemoveItem => new C.RemoveItem(),
            (short)ClientPacketIds.RemoveSlotItem => new C.RemoveSlotItem(),
            (short)ClientPacketIds.SplitItem => new C.SplitItem(),
            (short)ClientPacketIds.UseItem => new C.UseItem(),
            (short)ClientPacketIds.DropItem => new C.DropItem(),
            (short)ClientPacketIds.DepositRefineItem => new C.DepositRefineItem(),
            (short)ClientPacketIds.RetrieveRefineItem => new C.RetrieveRefineItem(),
            (short)ClientPacketIds.RefineCancel => new C.RefineCancel(),
            (short)ClientPacketIds.RefineItem => new C.RefineItem(),
            (short)ClientPacketIds.CheckRefine => new C.CheckRefine(),
            (short)ClientPacketIds.ReplaceWedRing => new C.ReplaceWedRing(),
            (short)ClientPacketIds.DepositTradeItem => new C.DepositTradeItem(),
            (short)ClientPacketIds.RetrieveTradeItem => new C.RetrieveTradeItem(),
            (short)ClientPacketIds.DropGold => new C.DropGold(),
            (short)ClientPacketIds.PickUp => new C.PickUp(),
            (short)ClientPacketIds.Inspect => new C.Inspect(),
            (short)ClientPacketIds.ChangeAMode => new C.ChangeAMode(),
            (short)ClientPacketIds.ChangePMode => new C.ChangePMode(),
            (short)ClientPacketIds.ChangeTrade => new C.ChangeTrade(),
            (short)ClientPacketIds.Attack => new C.Attack(),
            (short)ClientPacketIds.RangeAttack => new C.RangeAttack(),
            (short)ClientPacketIds.Harvest => new C.Harvest(),
            (short)ClientPacketIds.CallNPC => new C.CallNPC(),
            (short)ClientPacketIds.BuyItem => new C.BuyItem(),
            (short)ClientPacketIds.SellItem => new C.SellItem(),
            (short)ClientPacketIds.CraftItem => new C.CraftItem(),
            (short)ClientPacketIds.RepairItem => new C.RepairItem(),
            (short)ClientPacketIds.BuyItemBack => new C.BuyItemBack(),
            (short)ClientPacketIds.SRepairItem => new C.SRepairItem(),
            (short)ClientPacketIds.MagicKey => new C.MagicKey(),
            (short)ClientPacketIds.Magic => new C.Magic(),
            (short)ClientPacketIds.SwitchGroup => new C.SwitchGroup(),
            (short)ClientPacketIds.AddMember => new C.AddMember(),
            (short)ClientPacketIds.DellMember => new C.DelMember(),
            (short)ClientPacketIds.GroupInvite => new C.GroupInvite(),
            (short)ClientPacketIds.TownRevive => new C.TownRevive(),
            (short)ClientPacketIds.SpellToggle => new C.SpellToggle(),
            (short)ClientPacketIds.ConsignItem => new C.ConsignItem(),
            (short)ClientPacketIds.MarketSearch => new C.MarketSearch(),
            (short)ClientPacketIds.MarketRefresh => new C.MarketRefresh(),
            (short)ClientPacketIds.MarketPage => new C.MarketPage(),
            (short)ClientPacketIds.MarketBuy => new C.MarketBuy(),
            (short)ClientPacketIds.MarketGetBack => new C.MarketGetBack(),
            (short)ClientPacketIds.MarketSellNow => new C.MarketSellNow(),
            (short)ClientPacketIds.RequestUserName => new C.RequestUserName(),
            (short)ClientPacketIds.RequestChatItem => new C.RequestChatItem(),
            (short)ClientPacketIds.EditGuildMember => new C.EditGuildMember(),
            (short)ClientPacketIds.EditGuildNotice => new C.EditGuildNotice(),
            (short)ClientPacketIds.GuildInvite => new C.GuildInvite(),
            (short)ClientPacketIds.GuildNameReturn => new C.GuildNameReturn(),
            (short)ClientPacketIds.RequestGuildInfo => new C.RequestGuildInfo(),
            (short)ClientPacketIds.GuildStorageGoldChange => new C.GuildStorageGoldChange(),
            (short)ClientPacketIds.GuildStorageItemChange => new C.GuildStorageItemChange(),
            (short)ClientPacketIds.GuildWarReturn => new C.GuildWarReturn(),
            (short)ClientPacketIds.MarriageRequest => new C.MarriageRequest(),
            (short)ClientPacketIds.MarriageReply => new C.MarriageReply(),
            (short)ClientPacketIds.ChangeMarriage => new C.ChangeMarriage(),
            (short)ClientPacketIds.DivorceRequest => new C.DivorceRequest(),
            (short)ClientPacketIds.DivorceReply => new C.DivorceReply(),
            (short)ClientPacketIds.AddMentor => new C.AddMentor(),
            (short)ClientPacketIds.MentorReply => new C.MentorReply(),
            (short)ClientPacketIds.AllowMentor => new C.AllowMentor(),
            (short)ClientPacketIds.CancelMentor => new C.CancelMentor(),
            (short)ClientPacketIds.TradeRequest => new C.TradeRequest(),
            (short)ClientPacketIds.TradeReply => new C.TradeReply(),
            (short)ClientPacketIds.TradeGold => new C.TradeGold(),
            (short)ClientPacketIds.TradeConfirm => new C.TradeConfirm(),
            (short)ClientPacketIds.TradeCancel => new C.TradeCancel(),
            (short)ClientPacketIds.EquipSlotItem => new C.EquipSlotItem(),
            (short)ClientPacketIds.FishingCast => new C.FishingCast(),
            (short)ClientPacketIds.FishingChangeAutocast => new C.FishingChangeAutocast(),
            (short)ClientPacketIds.AcceptQuest => new C.AcceptQuest(),
            (short)ClientPacketIds.FinishQuest => new C.FinishQuest(),
            (short)ClientPacketIds.AbandonQuest => new C.AbandonQuest(),
            (short)ClientPacketIds.ShareQuest => new C.ShareQuest(),
            (short)ClientPacketIds.AcceptReincarnation => new C.AcceptReincarnation(),
            (short)ClientPacketIds.CancelReincarnation => new C.CancelReincarnation(),
            (short)ClientPacketIds.CombineItem => new C.CombineItem(),
            (short)ClientPacketIds.AwakeningNeedMaterials => new C.AwakeningNeedMaterials(),
            (short)ClientPacketIds.AwakeningLockedItem => new C.AwakeningLockedItem(),
            (short)ClientPacketIds.Awakening => new C.Awakening(),
            (short)ClientPacketIds.DisassembleItem => new C.DisassembleItem(),
            (short)ClientPacketIds.DowngradeAwakening => new C.DowngradeAwakening(),
            (short)ClientPacketIds.ResetAddedItem => new C.ResetAddedItem(),
            (short)ClientPacketIds.SendMail => new C.SendMail(),
            (short)ClientPacketIds.ReadMail => new C.ReadMail(),
            (short)ClientPacketIds.CollectParcel => new C.CollectParcel(),
            (short)ClientPacketIds.DeleteMail => new C.DeleteMail(),
            (short)ClientPacketIds.LockMail => new C.LockMail(),
            (short)ClientPacketIds.MailLockedItem => new C.MailLockedItem(),
            (short)ClientPacketIds.MailCost => new C.MailCost(),
            (short)ClientPacketIds.RequestIntelligentCreatureUpdates => new C.RequestIntelligentCreatureUpdates(),
            (short)ClientPacketIds.UpdateIntelligentCreature => new C.UpdateIntelligentCreature(),
            (short)ClientPacketIds.IntelligentCreaturePickup => new C.IntelligentCreaturePickup(),
            (short)ClientPacketIds.AddFriend => new C.AddFriend(),
            (short)ClientPacketIds.RemoveFriend => new C.RemoveFriend(),
            (short)ClientPacketIds.RefreshFriends => new C.RefreshFriends(),
            (short)ClientPacketIds.AddMemo => new C.AddMemo(),
            (short)ClientPacketIds.GuildBuffUpdate => new C.GuildBuffUpdate(),
            (short)ClientPacketIds.GameshopBuy => new C.GameshopBuy(),
            (short)ClientPacketIds.NPCConfirmInput => new C.NPCConfirmInput(),
            (short)ClientPacketIds.ReportIssue => new C.ReportIssue(),
            (short)ClientPacketIds.GetRanking => new C.GetRanking(),
            (short)ClientPacketIds.Opendoor => new C.Opendoor(),
            (short)ClientPacketIds.GetRentedItems => new C.GetRentedItems(),
            (short)ClientPacketIds.ItemRentalRequest => new C.ItemRentalRequest(),
            (short)ClientPacketIds.ItemRentalFee => new C.ItemRentalFee(),
            (short)ClientPacketIds.ItemRentalPeriod => new C.ItemRentalPeriod(),
            (short)ClientPacketIds.DepositRentalItem => new C.DepositRentalItem(),
            (short)ClientPacketIds.RetrieveRentalItem => new C.RetrieveRentalItem(),
            (short)ClientPacketIds.CancelItemRental => new C.CancelItemRental(),
            (short)ClientPacketIds.ItemRentalLockFee => new C.ItemRentalLockFee(),
            (short)ClientPacketIds.ItemRentalLockItem => new C.ItemRentalLockItem(),
            (short)ClientPacketIds.ConfirmItemRental => new C.ConfirmItemRental(),
            _ => null,
        };
    }
    public static Packet GetServerPacket(short index)
    {
        return index switch
        {
            (short)ServerPacketIds.Connected => new S.Connected(),
            (short)ServerPacketIds.ClientVersion => new S.ClientVersion(),
            (short)ServerPacketIds.Disconnect => new S.Disconnect(),
            (short)ServerPacketIds.KeepAlive => new S.KeepAlive(),
            (short)ServerPacketIds.NewAccount => new S.NewAccount(),
            (short)ServerPacketIds.ChangePassword => new S.ChangePassword(),
            (short)ServerPacketIds.ChangePasswordBanned => new S.ChangePasswordBanned(),
            (short)ServerPacketIds.Login => new S.Login(),
            (short)ServerPacketIds.LoginBanned => new S.LoginBanned(),
            (short)ServerPacketIds.LoginSuccess => new S.LoginSuccess(),
            (short)ServerPacketIds.NewCharacter => new S.NewCharacter(),
            (short)ServerPacketIds.NewCharacterSuccess => new S.NewCharacterSuccess(),
            (short)ServerPacketIds.DeleteCharacter => new S.DeleteCharacter(),
            (short)ServerPacketIds.DeleteCharacterSuccess => new S.DeleteCharacterSuccess(),
            (short)ServerPacketIds.StartGame => new S.StartGame(),
            (short)ServerPacketIds.StartGameBanned => new S.StartGameBanned(),
            (short)ServerPacketIds.StartGameDelay => new S.StartGameDelay(),
            (short)ServerPacketIds.MapInformation => new S.MapInformation(),
            (short)ServerPacketIds.UserInformation => new S.UserInformation(),
            (short)ServerPacketIds.UserSlotsRefresh => new S.UserSlotsRefresh(),
            (short)ServerPacketIds.UserLocation => new S.UserLocation(),
            (short)ServerPacketIds.ObjectPlayer => new S.ObjectPlayer(),
            (short)ServerPacketIds.ObjectRemove => new S.ObjectRemove(),
            (short)ServerPacketIds.ObjectTurn => new S.ObjectTurn(),
            (short)ServerPacketIds.ObjectWalk => new S.ObjectWalk(),
            (short)ServerPacketIds.ObjectRun => new S.ObjectRun(),
            (short)ServerPacketIds.Chat => new S.Chat(),
            (short)ServerPacketIds.ObjectChat => new S.ObjectChat(),
            (short)ServerPacketIds.NewItemInfo => new S.NewItemInfo(),
            (short)ServerPacketIds.NewChatItem => new S.NewChatItem(),
            (short)ServerPacketIds.MoveItem => new S.MoveItem(),
            (short)ServerPacketIds.EquipItem => new S.EquipItem(),
            (short)ServerPacketIds.MergeItem => new S.MergeItem(),
            (short)ServerPacketIds.RemoveItem => new S.RemoveItem(),
            (short)ServerPacketIds.RemoveSlotItem => new S.RemoveSlotItem(),
            (short)ServerPacketIds.TakeBackItem => new S.TakeBackItem(),
            (short)ServerPacketIds.StoreItem => new S.StoreItem(),
            (short)ServerPacketIds.DepositRefineItem => new S.DepositRefineItem(),
            (short)ServerPacketIds.RetrieveRefineItem => new S.RetrieveRefineItem(),
            (short)ServerPacketIds.RefineItem => new S.RefineItem(),
            (short)ServerPacketIds.DepositTradeItem => new S.DepositTradeItem(),
            (short)ServerPacketIds.RetrieveTradeItem => new S.RetrieveTradeItem(),
            (short)ServerPacketIds.SplitItem => new S.SplitItem(),
            (short)ServerPacketIds.SplitItem1 => new S.SplitItem1(),
            (short)ServerPacketIds.UseItem => new S.UseItem(),
            (short)ServerPacketIds.DropItem => new S.DropItem(),
            (short)ServerPacketIds.PlayerUpdate => new S.PlayerUpdate(),
            (short)ServerPacketIds.PlayerInspect => new S.PlayerInspect(),
            (short)ServerPacketIds.LogOutSuccess => new S.LogOutSuccess(),
            (short)ServerPacketIds.LogOutFailed => new S.LogOutFailed(),
            (short)ServerPacketIds.TimeOfDay => new S.TimeOfDay(),
            (short)ServerPacketIds.ChangeAMode => new S.ChangeAMode(),
            (short)ServerPacketIds.ChangePMode => new S.ChangePMode(),
            (short)ServerPacketIds.ObjectItem => new S.ObjectItem(),
            (short)ServerPacketIds.ObjectGold => new S.ObjectGold(),
            (short)ServerPacketIds.GainedItem => new S.GainedItem(),
            (short)ServerPacketIds.GainedGold => new S.GainedGold(),
            (short)ServerPacketIds.LoseGold => new S.LoseGold(),
            (short)ServerPacketIds.GainedCredit => new S.GainedCredit(),
            (short)ServerPacketIds.LoseCredit => new S.LoseCredit(),
            (short)ServerPacketIds.ObjectMonster => new S.ObjectMonster(),
            (short)ServerPacketIds.ObjectAttack => new S.ObjectAttack(),
            (short)ServerPacketIds.Struck => new S.Struck(),
            (short)ServerPacketIds.DamageIndicator => new S.DamageIndicator(),
            (short)ServerPacketIds.ObjectStruck => new S.ObjectStruck(),
            (short)ServerPacketIds.DuraChanged => new S.DuraChanged(),
            (short)ServerPacketIds.HealthChanged => new S.HealthChanged(),
            (short)ServerPacketIds.DeleteItem => new S.DeleteItem(),
            (short)ServerPacketIds.Death => new S.Death(),
            (short)ServerPacketIds.ObjectDied => new S.ObjectDied(),
            (short)ServerPacketIds.ColourChanged => new S.ColourChanged(),
            (short)ServerPacketIds.ObjectColourChanged => new S.ObjectColourChanged(),
            (short)ServerPacketIds.ObjectGuildNameChanged => new S.ObjectGuildNameChanged(),
            (short)ServerPacketIds.GainExperience => new S.GainExperience(),
            (short)ServerPacketIds.LevelChanged => new S.LevelChanged(),
            (short)ServerPacketIds.ObjectLeveled => new S.ObjectLeveled(),
            (short)ServerPacketIds.ObjectHarvest => new S.ObjectHarvest(),
            (short)ServerPacketIds.ObjectHarvested => new S.ObjectHarvested(),
            (short)ServerPacketIds.ObjectNpc => new S.ObjectNPC(),
            (short)ServerPacketIds.NPCResponse => new S.NPCResponse(),
            (short)ServerPacketIds.ObjectHide => new S.ObjectHide(),
            (short)ServerPacketIds.ObjectShow => new S.ObjectShow(),
            (short)ServerPacketIds.Poisoned => new S.Poisoned(),
            (short)ServerPacketIds.ObjectPoisoned => new S.ObjectPoisoned(),
            (short)ServerPacketIds.MapChanged => new S.MapChanged(),
            (short)ServerPacketIds.ObjectTeleportOut => new S.ObjectTeleportOut(),
            (short)ServerPacketIds.ObjectTeleportIn => new S.ObjectTeleportIn(),
            (short)ServerPacketIds.TeleportIn => new S.TeleportIn(),
            (short)ServerPacketIds.NPCGoods => new S.NPCGoods(),
            (short)ServerPacketIds.NPCSell => new S.NPCSell(),
            (short)ServerPacketIds.NPCRepair => new S.NPCRepair(),
            (short)ServerPacketIds.NPCSRepair => new S.NPCSRepair(),
            (short)ServerPacketIds.NPCRefine => new S.NPCRefine(),
            (short)ServerPacketIds.NPCCheckRefine => new S.NPCCheckRefine(),
            (short)ServerPacketIds.NPCCollectRefine => new S.NPCCollectRefine(),
            (short)ServerPacketIds.NPCReplaceWedRing => new S.NPCReplaceWedRing(),
            (short)ServerPacketIds.NPCStorage => new S.NPCStorage(),
            (short)ServerPacketIds.SellItem => new S.SellItem(),
            (short)ServerPacketIds.CraftItem => new S.CraftItem(),
            (short)ServerPacketIds.RepairItem => new S.RepairItem(),
            (short)ServerPacketIds.ItemRepaired => new S.ItemRepaired(),
            (short)ServerPacketIds.ItemSlotSizeChanged => new S.ItemSlotSizeChanged(),
            (short)ServerPacketIds.NewMagic => new S.NewMagic(),
            (short)ServerPacketIds.MagicLeveled => new S.MagicLeveled(),
            (short)ServerPacketIds.Magic => new S.Magic(),
            (short)ServerPacketIds.MagicDelay => new S.MagicDelay(),
            (short)ServerPacketIds.MagicCast => new S.MagicCast(),
            (short)ServerPacketIds.ObjectMagic => new S.ObjectMagic(),
            (short)ServerPacketIds.ObjectProjectile => new S.ObjectProjectile(),
            (short)ServerPacketIds.ObjectEffect => new S.ObjectEffect(),
            (short)ServerPacketIds.RangeAttack => new S.RangeAttack(),
            (short)ServerPacketIds.Pushed => new S.Pushed(),
            (short)ServerPacketIds.ObjectPushed => new S.ObjectPushed(),
            (short)ServerPacketIds.ObjectName => new S.ObjectName(),
            (short)ServerPacketIds.UserStorage => new S.UserStorage(),
            (short)ServerPacketIds.SwitchGroup => new S.SwitchGroup(),
            (short)ServerPacketIds.DeleteGroup => new S.DeleteGroup(),
            (short)ServerPacketIds.DeleteMember => new S.DeleteMember(),
            (short)ServerPacketIds.GroupInvite => new S.GroupInvite(),
            (short)ServerPacketIds.AddMember => new S.AddMember(),
            (short)ServerPacketIds.Revived => new S.Revived(),
            (short)ServerPacketIds.ObjectRevived => new S.ObjectRevived(),
            (short)ServerPacketIds.SpellToggle => new S.SpellToggle(),
            (short)ServerPacketIds.ObjectHealth => new S.ObjectHealth(),
            (short)ServerPacketIds.MapEffect => new S.MapEffect(),
            (short)ServerPacketIds.ObjectRangeAttack => new S.ObjectRangeAttack(),
            (short)ServerPacketIds.AddBuff => new S.AddBuff(),
            (short)ServerPacketIds.RemoveBuff => new S.RemoveBuff(),
            (short)ServerPacketIds.PauseBuff => new S.PauseBuff(),
            (short)ServerPacketIds.ObjectHidden => new S.ObjectHidden(),
            (short)ServerPacketIds.RefreshItem => new S.RefreshItem(),
            (short)ServerPacketIds.ObjectSpell => new S.ObjectSpell(),
            (short)ServerPacketIds.UserDash => new S.UserDash(),
            (short)ServerPacketIds.ObjectDash => new S.ObjectDash(),
            (short)ServerPacketIds.UserDashFail => new S.UserDashFail(),
            (short)ServerPacketIds.ObjectDashFail => new S.ObjectDashFail(),
            (short)ServerPacketIds.NPCConsign => new S.NPCConsign(),
            (short)ServerPacketIds.NPCMarket => new S.NPCMarket(),
            (short)ServerPacketIds.NPCMarketPage => new S.NPCMarketPage(),
            (short)ServerPacketIds.ConsignItem => new S.ConsignItem(),
            (short)ServerPacketIds.MarketFail => new S.MarketFail(),
            (short)ServerPacketIds.MarketSuccess => new S.MarketSuccess(),
            (short)ServerPacketIds.ObjectSitDown => new S.ObjectSitDown(),
            (short)ServerPacketIds.InTrapRock => new S.InTrapRock(),
            (short)ServerPacketIds.RemoveMagic => new S.RemoveMagic(),
            (short)ServerPacketIds.BaseStatsInfo => new S.BaseStatsInfo(),
            (short)ServerPacketIds.UserName => new S.UserName(),
            (short)ServerPacketIds.ChatItemStats => new S.ChatItemStats(),
            (short)ServerPacketIds.GuildMemberChange => new S.GuildMemberChange(),
            (short)ServerPacketIds.GuildNoticeChange => new S.GuildNoticeChange(),
            (short)ServerPacketIds.GuildStatus => new S.GuildStatus(),
            (short)ServerPacketIds.GuildInvite => new S.GuildInvite(),
            (short)ServerPacketIds.GuildExpGain => new S.GuildExpGain(),
            (short)ServerPacketIds.GuildNameRequest => new S.GuildNameRequest(),
            (short)ServerPacketIds.GuildStorageGoldChange => new S.GuildStorageGoldChange(),
            (short)ServerPacketIds.GuildStorageItemChange => new S.GuildStorageItemChange(),
            (short)ServerPacketIds.GuildStorageList => new S.GuildStorageList(),
            (short)ServerPacketIds.GuildRequestWar => new S.GuildRequestWar(),
            (short)ServerPacketIds.DefaultNPC => new S.DefaultNPC(),
            (short)ServerPacketIds.NPCUpdate => new S.NPCUpdate(),
            (short)ServerPacketIds.NPCImageUpdate => new S.NPCImageUpdate(),
            (short)ServerPacketIds.MarriageRequest => new S.MarriageRequest(),
            (short)ServerPacketIds.DivorceRequest => new S.DivorceRequest(),
            (short)ServerPacketIds.MentorRequest => new S.MentorRequest(),
            (short)ServerPacketIds.TradeRequest => new S.TradeRequest(),
            (short)ServerPacketIds.TradeAccept => new S.TradeAccept(),
            (short)ServerPacketIds.TradeGold => new S.TradeGold(),
            (short)ServerPacketIds.TradeItem => new S.TradeItem(),
            (short)ServerPacketIds.TradeConfirm => new S.TradeConfirm(),
            (short)ServerPacketIds.TradeCancel => new S.TradeCancel(),
            (short)ServerPacketIds.MountUpdate => new S.MountUpdate(),
            (short)ServerPacketIds.TransformUpdate => new S.TransformUpdate(),
            (short)ServerPacketIds.EquipSlotItem => new S.EquipSlotItem(),
            (short)ServerPacketIds.FishingUpdate => new S.FishingUpdate(),
            (short)ServerPacketIds.ChangeQuest => new S.ChangeQuest(),
            (short)ServerPacketIds.CompleteQuest => new S.CompleteQuest(),
            (short)ServerPacketIds.ShareQuest => new S.ShareQuest(),
            (short)ServerPacketIds.NewQuestInfo => new S.NewQuestInfo(),
            (short)ServerPacketIds.GainedQuestItem => new S.GainedQuestItem(),
            (short)ServerPacketIds.DeleteQuestItem => new S.DeleteQuestItem(),
            (short)ServerPacketIds.CancelReincarnation => new S.CancelReincarnation(),
            (short)ServerPacketIds.RequestReincarnation => new S.RequestReincarnation(),
            (short)ServerPacketIds.UserBackStep => new S.UserBackStep(),
            (short)ServerPacketIds.ObjectBackStep => new S.ObjectBackStep(),
            (short)ServerPacketIds.UserDashAttack => new S.UserDashAttack(),
            (short)ServerPacketIds.ObjectDashAttack => new S.ObjectDashAttack(),
            //Warrior Skill - SlashingBurst
            (short)ServerPacketIds.UserAttackMove => new S.UserAttackMove(),
            (short)ServerPacketIds.CombineItem => new S.CombineItem(),
            (short)ServerPacketIds.ItemUpgraded => new S.ItemUpgraded(),
            (short)ServerPacketIds.SetConcentration => new S.SetConcentration(),
            (short)ServerPacketIds.SetElemental => new S.SetElemental(),
            (short)ServerPacketIds.RemoveDelayedExplosion => new S.RemoveDelayedExplosion(),
            (short)ServerPacketIds.ObjectDeco => new S.ObjectDeco(),
            (short)ServerPacketIds.ObjectSneaking => new S.ObjectSneaking(),
            (short)ServerPacketIds.ObjectLevelEffects => new S.ObjectLevelEffects(),
            (short)ServerPacketIds.SetBindingShot => new S.SetBindingShot(),
            (short)ServerPacketIds.SendOutputMessage => new S.SendOutputMessage(),
            (short)ServerPacketIds.NPCAwakening => new S.NPCAwakening(),
            (short)ServerPacketIds.NPCDisassemble => new S.NPCDisassemble(),
            (short)ServerPacketIds.NPCDowngrade => new S.NPCDowngrade(),
            (short)ServerPacketIds.NPCReset => new S.NPCReset(),
            (short)ServerPacketIds.AwakeningNeedMaterials => new S.AwakeningNeedMaterials(),
            (short)ServerPacketIds.AwakeningLockedItem => new S.AwakeningLockedItem(),
            (short)ServerPacketIds.Awakening => new S.Awakening(),
            (short)ServerPacketIds.ReceiveMail => new S.ReceiveMail(),
            (short)ServerPacketIds.MailLockedItem => new S.MailLockedItem(),
            (short)ServerPacketIds.MailSent => new S.MailSent(),
            (short)ServerPacketIds.MailSendRequest => new S.MailSendRequest(),
            (short)ServerPacketIds.ParcelCollected => new S.ParcelCollected(),
            (short)ServerPacketIds.MailCost => new S.MailCost(),
            (short)ServerPacketIds.ResizeInventory => new S.ResizeInventory(),
            (short)ServerPacketIds.ResizeStorage => new S.ResizeStorage(),
            (short)ServerPacketIds.NewIntelligentCreature => new S.NewIntelligentCreature(),
            (short)ServerPacketIds.UpdateIntelligentCreatureList => new S.UpdateIntelligentCreatureList(),
            (short)ServerPacketIds.IntelligentCreatureEnableRename => new S.IntelligentCreatureEnableRename(),
            (short)ServerPacketIds.IntelligentCreaturePickup => new S.IntelligentCreaturePickup(),
            (short)ServerPacketIds.NPCPearlGoods => new S.NPCPearlGoods(),
            (short)ServerPacketIds.FriendUpdate => new S.FriendUpdate(),
            (short)ServerPacketIds.LoverUpdate => new S.LoverUpdate(),
            (short)ServerPacketIds.MentorUpdate => new S.MentorUpdate(),
            (short)ServerPacketIds.GuildBuffList => new S.GuildBuffList(),
            (short)ServerPacketIds.GameShopInfo => new S.GameShopInfo(),
            (short)ServerPacketIds.GameShopStock => new S.GameShopStock(),
            (short)ServerPacketIds.NPCRequestInput => new S.NPCRequestInput(),
            (short)ServerPacketIds.Rankings => new S.Rankings(),
            (short)ServerPacketIds.Opendoor => new S.Opendoor(),
            (short)ServerPacketIds.GetRentedItems => new S.GetRentedItems(),
            (short)ServerPacketIds.ItemRentalRequest => new S.ItemRentalRequest(),
            (short)ServerPacketIds.ItemRentalFee => new S.ItemRentalFee(),
            (short)ServerPacketIds.ItemRentalPeriod => new S.ItemRentalPeriod(),
            (short)ServerPacketIds.DepositRentalItem => new S.DepositRentalItem(),
            (short)ServerPacketIds.RetrieveRentalItem => new S.RetrieveRentalItem(),
            (short)ServerPacketIds.UpdateRentalItem => new S.UpdateRentalItem(),
            (short)ServerPacketIds.CancelItemRental => new S.CancelItemRental(),
            (short)ServerPacketIds.ItemRentalLock => new S.ItemRentalLock(),
            (short)ServerPacketIds.ItemRentalPartnerLock => new S.ItemRentalPartnerLock(),
            (short)ServerPacketIds.CanConfirmItemRental => new S.CanConfirmItemRental(),
            (short)ServerPacketIds.ConfirmItemRental => new S.ConfirmItemRental(),
            (short)ServerPacketIds.NewRecipeInfo => new S.NewRecipeInfo(),
            (short)ServerPacketIds.OpenBrowser => new S.OpenBrowser(),
            (short)ServerPacketIds.PlaySound => new S.PlaySound(),
            (short)ServerPacketIds.SetTimer => new S.SetTimer(),
            (short)ServerPacketIds.ExpireTimer => new S.ExpireTimer(),
            (short)ServerPacketIds.UpdateNotice => new S.UpdateNotice(),
            (short)ServerPacketIds.Roll => new S.Roll(),
            _ => null,
        };
    }
}